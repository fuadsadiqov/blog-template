// <auto-generated />
using System;
using GP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GP.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250115061730_User-add-field-to-db")]
    partial class Useraddfieldtodb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GP.Domain.Entities.App.AppDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppDomains", "app");
                });

            modelBuilder.Entity("GP.Domain.Entities.App.AppOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsOtpRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("AppOptions", "app");
                });

            modelBuilder.Entity("GP.Domain.Entities.Audit.SmsSenderServiceLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Balance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SmsText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("SmsSenderServiceLogs", "log");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.EmailConfirmationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("EmailConfirmationRequests", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.PasswordResetRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetRequests", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.Permission", b =>
                {
                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsDirective")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.Property<string>("VisibleLabel")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Label");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Permissions", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.PermissionCategory", b =>
                {
                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.Property<string>("VisibleLabel")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Label");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PermissionCategories", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.PermissionCategoryPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryId")
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PermissionId")
                        .HasColumnType("character varying(32)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionCategoryPermissions", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.RolePermissionCategory", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("PermissionCategoryPermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("RoleId", "PermissionCategoryPermissionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PermissionCategoryPermissionId");

                    b.ToTable("RolePermissionCategories", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("CanAccessOutOfDomain")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullNameAz")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("LastAccessFailedAttempt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("OtpSentCount")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<byte>("UserType")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserJwt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Application")
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImpersonatorId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text");

                    b.Property<string>("RememberMe")
                        .HasColumnType("text");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ImpersonatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserJwts", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PermissionId")
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserSmsConfirmationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfirmationStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SmsRequestTypeEnum")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("SmsConfirmationRequests", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "idt");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.Key", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentId");

                    b.ToTable("Keys", "lng");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Languages", "lng");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.LanguageKey", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasColumnType("character varying(32)");

                    b.Property<int>("KeyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LanguageId", "KeyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("KeyId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LanguageKeys", "lng");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.LanguageKeyValue", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LanguageCode", "Key");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LanguageKeyValues", "lng");
                });

            modelBuilder.Entity("GP.Domain.Entities.App.AppDomain", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GP.Domain.Entities.App.AppOption", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.Domain.Entities.Audit.SmsSenderServiceLog", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.EmailConfirmationRequest", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany("CreatedEmailConfirmationRequests")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany("ModifiedEmailConfirmationRequests")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "User")
                        .WithMany("EmailConfirmationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.PasswordResetRequest", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany("CreatedPasswordResetRequests")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany("ModifiedPasswordResetRequests")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "User")
                        .WithMany("PasswordResetRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.Permission", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.PermissionCategory", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.PermissionCategoryPermission", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.PermissionCategory", "Category")
                        .WithMany("PossiblePermissions")
                        .HasForeignKey("CategoryId");

                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.Permission", "Permission")
                        .WithMany("Categories")
                        .HasForeignKey("PermissionId");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.Role", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.RolePermissionCategory", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.PermissionCategoryPermission", "PermissionCategoryPermission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionCategoryPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP.Domain.Entities.Identity.Role", "Role")
                        .WithMany("PermissionCategory")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PermissionCategoryPermission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserJwt", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany("CreatedJwts")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "Impersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatorId");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany("ModifiedJwts")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "User")
                        .WithMany("Jwts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Impersonator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserPermission", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP.Domain.Entities.Identity.User", "User")
                        .WithMany("DirectivePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany("ModifiedRoles")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP.Domain.Entities.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserSmsConfirmationRequest", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.Key", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GP.Domain.Entities.Lang.Key", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.Language", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.LanguageKey", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Lang.Key", "Key")
                        .WithMany("Languages")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP.Domain.Entities.Lang.Language", "Language")
                        .WithMany("LanguageKeys")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Key");

                    b.Navigation("Language");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.LanguageKeyValue", b =>
                {
                    b.HasOne("GP.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GP.Domain.Entities.Lang.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP.Domain.Entities.Identity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Language");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.Permission", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.PermissionCategory", b =>
                {
                    b.Navigation("PossiblePermissions");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.PermissionCategoryPermission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("PermissionCategory");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GP.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("CreatedEmailConfirmationRequests");

                    b.Navigation("CreatedJwts");

                    b.Navigation("CreatedPasswordResetRequests");

                    b.Navigation("CreatedRoles");

                    b.Navigation("DirectivePermissions");

                    b.Navigation("EmailConfirmationRequests");

                    b.Navigation("Jwts");

                    b.Navigation("ModifiedEmailConfirmationRequests");

                    b.Navigation("ModifiedJwts");

                    b.Navigation("ModifiedPasswordResetRequests");

                    b.Navigation("ModifiedRoles");

                    b.Navigation("PasswordResetRequests");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.Key", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("GP.Domain.Entities.Lang.Language", b =>
                {
                    b.Navigation("LanguageKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
